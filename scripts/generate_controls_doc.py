# Copyright (c) 2018 Intel Corporation
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import sys
import os
import re

# File Header:
def GetHeader():
    return """# How to Use the Intercept Layer for OpenCL Applications

This file is automatically generated using the script `generate_controls_doc.py`.
Please do not edit it manually!

By default, the Intercept Layer for OpenCL Applications will not modify any OpenCL
calls.  You may notice some status messages being printed to stderr, but otherwise
your application should run exactly as it does without the Intercept Layer for
OpenCL Applications.

## Controls

The Intercept Layer for OpenCL Applications is controlled using the Windows
registry, Linux configuration files, or environment variables on all OSes.

### Windows Registry

On Windows, the Intercept Layer for OpenCL Applications reads its registry keys
from:

    HKEY_CURRENT_USER\SOFTWARE\INTEL\IGFX\CLIntercept

This is the recommended registry location as it has several advantages over
HKEY_LOCAL_MACHINE: modifying the registry keys does not require Administrator
access, registry keys do not need to be set in multiple places, and each user
can set their own registry keys without affecting other users.

For backwards compatibility, the Intercept Layer for OpenCL applications
will still read registry keys from:

    // For 32-bit systems, or 64-bit applications on a 64-bit system:
    HKEY_LOCAL_MACHINE\SOFTWARE\INTEL\IGFX\CLIntercept

    // For 32-bit applications on a 64-bit system:
    HKEY_LOCAL_MACHINE\SOFTWARE\WoW6432Node\INTEL\IGFX\CLIntercept

If a registry is set in both HKCU and HKLM, the setting in HKCU will "win".

### Linux Configuration Files

On Linux, the Intercept Layer for OpenCL Applications will read control values
from ~/clintercept.conf.  Controls may be set by putting the control on its own
line, followed by an equals sign, followed by the value you'd like to set the
option to.  Lines that begin with a semi-colon(";"), a hash mark ("#"), or a
C++-style comment ("//") are ignored.  For example, to enable CallLogging, put
a line in your ~/clintercept.conf that looks like:

    // Enable CallLogging:
    CallLogging=1

### Environment Variables

The Intercept Layer for OpenCL may be controlled using environment variables.
The name of the environment variable control is "CLI_" and the control name, to
distinguish controls from other environment variables, and to make it easy to
list all of the environment variable controls.  So, to enable CallLogging, you
could type:

    export CLI_CallLogging=1

To disable CallLogging, you could type:

    unset CLI_CallLogging

To list all environment variable controls, you could type:

    env | grep CLI_

### Setup and Loading Controls

##### `DllName` (string)

Used to control the DLL or Shared Library that the Intercept Layer for OpenCL Applications loads to make real OpenCL calls.  If present, only this DLL name is loaded.  If omitted, the Intercept Layer for OpenCL Applications tries to load the real OpenCL DLL from file names in this order:

- real_OpenCL.dll (anywhere in the system path)
- %WINDIR%\SysWOW64\OpenCL.dll (32-bit DLLs only)
- %WINDIR%\System32\OpenCL.dll

##### `BreakOnLoad` (bool)

If set to a nonzero value, the Intercept Layer for OpenCL Applications will break into the debugger when it is loaded.

"""

# File Footer:
def GetFooter():
    return """
---

\* Other names and brands may be claimed as the property of others.

Copyright (c) 2018, Intel(R) Corporation
"""

printHelp = False

if len(sys.argv) < 3:
    nameControlsDoc = '../docs/controls.md'
else:
    nameControlsDoc = sys.argv[2]

if len(sys.argv) < 2:
    nameControlsSrc = '../Src/controls.h'
else:
    nameControlsSrc = sys.argv[1]

if ( len(sys.argv) == 2 ) and ( sys.argv[1] == '-h' or sys.argv[1] == '-?' ):
    printHelp = True

if printHelp:
    print('usage: generate_controls_doc.py {optional: nameControlsSrc, default: ../Src/controls.h} {optional: nameControlsDoc, default: ../docs/controls.md}')
elif not os.path.exists(nameControlsSrc):
    print('error: controls source file ' + nameControlsSrc + ' does not exist!')
else:
    print('Generating from source: ' + nameControlsSrc)

    srcFile = open(nameControlsSrc, 'rU')
    docFile = open(nameControlsDoc, 'w')

    docFile.write( GetHeader() )

    numberOfSeparators = 0
    numberOfControls = 0

    for line in srcFile:
        separator = re.search("^CLI_CONTROL_SEPARATOR\((.*)\)$", line)
        if separator:
            full = separator.group(1).strip()

            # Remove the last character of the string (":"):
            full = full[:-1];

            docFile.write('### ' + full + '\n\n')

            #print('Got separator: ' + full)

            numberOfSeparators = numberOfSeparators + 1
            continue

        control = re.search("^CLI_CONTROL\((.*)\)$", line)
        if control:
            full = control.group(1).strip()

            data = full.split(',', 3)
            type = data[0].strip()
            name = data[1].strip()
            default = data[2].strip()
            description = data[3].strip()

            # Remove std:: from the type:
            type = type.replace("std::", "")

            # Remove the first and last characters of the description:
            description = description[1:-1];
            # Replace escaped quotes with real quotes:
            description = description.replace("\\\"", "\"")
            # Replace underscores with escaped underscores:
            description = description.replace("_", "\\_")
            # Escape angle brackets:
            description = description.replace("<", "\<")
            description = description.replace(">", "\>")

            docFile.write('##### `' + name + '` (' + type + ')\n\n')
            docFile.write(description + '\n\n')

            #print('Got control: ' + name)
            #print('  description: ' + description)

            numberOfControls = numberOfControls + 1
            continue

        #print('Not sure what to do with: ' + line)

    docFile.write( GetFooter() )

    srcFile.close()
    docFile.close()

    print('Successfully generated file: ' + nameControlsDoc)
    print('Found ' + str(numberOfSeparators) + ' control separators.')
    print('Found ' + str(numberOfControls) + ' controls.')
